# file: examples/advanced-workflow.yml
# Example: Advanced workflow with quality checks and custom configuration
# Place this file at .github/workflows/format-and-quality.yml in your repository

name: Format and Quality Check

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main, develop]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      languages:
        description: "Languages to format"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - python
          - go
          - nodejs
          - css
          - markdown

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  format:
    name: Auto Format Code
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      changes-made: ${{ steps.format.outputs.changes-made }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
          fetch-depth: 0

      - name: Auto Format Code
        id: format
        uses: jdfalk/auto-formatter@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          languages: ${{ github.event.inputs.languages || 'all' }}
          python-line-length: 88
          commit-message: "style: auto-format code with comprehensive tools"
          add-pr-comment: true
          working-directory: "."

      - name: Run Issue Management
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          python scripts/issue_manager.py format-check
          python scripts/issue_manager.py close-duplicates

  quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: format
    if: always()
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy bandit safety

      - name: Install Go tools
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Install Node.js dependencies
        if: hashFiles('**/package.json') != ''
        run: npm ci

      - name: Python Quality Checks
        if: always()
        continue-on-error: true
        run: |
          if find . -name "*.py" -type f | grep -q .; then
            echo "Running Python quality checks..."
            ruff check . --output-format=github
            mypy . --ignore-missing-imports || true
            bandit -r . -f json -o bandit-report.json || true
            safety check --json --output safety-report.json || true
          fi

      - name: Go Quality Checks
        if: always()
        continue-on-error: true
        run: |
          if find . -name "*.go" -type f | grep -q .; then
            echo "Running Go quality checks..."
            golangci-lint run --out-format=github-actions
            staticcheck ./... || true
            go vet ./... || true
          fi

      - name: JavaScript/TypeScript Quality Checks
        if: always() && hashFiles('**/package.json') != ''
        continue-on-error: true
        run: |
          if find . \( -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" \) -type f | grep -q .; then
            echo "Running JavaScript/TypeScript quality checks..."
            if [ -f "tsconfig.json" ]; then
              npx tsc --noEmit || true
            fi
            if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
              npx eslint . --format=stylish || true
            fi
          fi

      - name: Upload Quality Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            bandit-report.json
            safety-report.json
            *.log
          retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: format
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: "python,go,javascript"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Generate Security Issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          python scripts/issue_manager.py codeql-alerts
